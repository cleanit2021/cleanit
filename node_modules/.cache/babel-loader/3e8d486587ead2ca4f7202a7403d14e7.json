{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar ClipboardPluginWeb =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ClipboardPluginWeb, _super);\n\n  function ClipboardPluginWeb() {\n    return _super.call(this, {\n      name: 'Clipboard',\n      platforms: ['web']\n    }) || this;\n  }\n\n  ClipboardPluginWeb.prototype.write = function (options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!(options.string || options.url)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , navigator.clipboard.writeText(options.string || options.url)];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (options.image) {\n              return [2\n              /*return*/\n              , Promise.reject(\"Setting images not supported on the web\")];\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype.read = function (_options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var text, data, _i, _a, item;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!(_options.type === 'string' || _options.type === 'url')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , navigator.clipboard.readText()];\n\n          case 1:\n            text = _b.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              value: text\n            })];\n\n          case 2:\n            return [4\n            /*yield*/\n            , navigator.clipboard.read()];\n\n          case 3:\n            data = _b.sent();\n\n            for (_i = 0, _a = data.items; _i < _a.length; _i++) {\n              item = _a[_i];\n\n              if (item.type === 'text/plain') {\n                return [2\n                /*return*/\n                , Promise.resolve({\n                  value: item.getAs('text/plain')\n                })];\n              }\n            }\n\n            _b.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            , Promise.reject('Unable to get data from clipboard')];\n        }\n      });\n    });\n  };\n\n  return ClipboardPluginWeb;\n}(WebPlugin);\n\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard };","map":{"version":3,"sources":["../../../src/web/clipboard.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,SAA1B;;AAWA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAA,MAAA;;AACtC,WAAA,kBAAA,GAAA;WACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AACJ,MAAA,IAAI,EAAE,WADF;AAEJ,MAAA,SAAS,EAAE,CAAC,KAAD;AAFP,KAAN,KAGE,I;AACH;;AAEK,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAN,UAAY,OAAZ,EAAmC;;;;;AACjC,gBAAI,CAAC,SAAS,CAAC,SAAf,EAA0B;AACxB,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CAAe,6CAAf,CAAP,CAAA;AACD;;gBAEG,EAAA,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,GAA1B,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACF,mBAAA,CAAA;AAAA;AAAA,cAAM,SAAS,CAAC,SAAV,CAAoB,SAApB,CAA8B,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,GAAxD,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;AACK,gBAAI,OAAO,CAAC,KAAZ,EAAmB;AACxB,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CAAe,yCAAf,CAAP,CAAA;AACD;;;;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,OAAR,EAAP,CAAA;;;;AACD,GAXK;;AAaA,EAAA,kBAAA,CAAA,SAAA,CAAA,IAAA,GAAN,UAAW,QAAX,EAAkC;;;;;;;AAChC,gBAAI,CAAC,SAAS,CAAC,SAAf,EAA0B;AACxB,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CAAe,6CAAf,CAAP,CAAA;AACD;;gBACG,EAAA,QAAQ,CAAC,IAAT,KAAkB,QAAlB,IAA8B,QAAQ,CAAC,IAAT,KAAkB,KAAhD,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACW,mBAAA,CAAA;AAAA;AAAA,cAAM,SAAS,CAAC,SAAV,CAAoB,QAApB,EAAN,CAAA;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,OAAR,CAAgB;AAAE,cAAA,KAAK,EAAE;AAAT,aAAhB,CAAP,CAAA;;;AAEa,mBAAA,CAAA;AAAA;AAAA,cAAM,SAAS,CAAC,SAAV,CAAoB,IAApB,EAAN,CAAA;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;AACN,iBAAA,EAAA,GAAA,CAAA,EAAmB,EAAA,GAAA,IAAI,CAAC,KAAxB,EAAmB,EAAA,GAAA,EAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAA+B;AAApB,cAAA,IAAI,GAAA,EAAA,CAAA,EAAA,CAAJ;;AACT,kBAAI,IAAI,CAAC,IAAL,KAAc,YAAlB,EAAgC;AAC9B,uBAAA,CAAA;AAAA;AAAA,kBAAO,OAAO,CAAC,OAAR,CAAgB;AAAE,kBAAA,KAAK,EAAE,IAAI,CAAC,KAAL,CAAW,YAAX;AAAT,iBAAhB,CAAP,CAAA;AACD;AACF;;;;;AAEH,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe,mCAAf,CAAP,CAAA;;;;AACD,GAhBK;;AAiBR,SAAA,kBAAA;AAAC,CAtCD,CAAwC,SAAxC,CAAA;;;AAwCA,IAAM,SAAS,GAAG,IAAI,kBAAJ,EAAlB;AAEA,SAAS,SAAT","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { WebPlugin } from './index';\nvar ClipboardPluginWeb = /** @class */ (function (_super) {\n    tslib_1.__extends(ClipboardPluginWeb, _super);\n    function ClipboardPluginWeb() {\n        return _super.call(this, {\n            name: 'Clipboard',\n            platforms: ['web']\n        }) || this;\n    }\n    ClipboardPluginWeb.prototype.write = function (options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!navigator.clipboard) {\n                            return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n                        }\n                        if (!(options.string || options.url)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, navigator.clipboard.writeText(options.string || options.url)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        if (options.image) {\n                            return [2 /*return*/, Promise.reject(\"Setting images not supported on the web\")];\n                        }\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, Promise.resolve()];\n                }\n            });\n        });\n    };\n    ClipboardPluginWeb.prototype.read = function (_options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var text, data, _i, _a, item;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!navigator.clipboard) {\n                            return [2 /*return*/, Promise.reject('Clipboard API not available in this browser')];\n                        }\n                        if (!(_options.type === 'string' || _options.type === 'url')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, navigator.clipboard.readText()];\n                    case 1:\n                        text = _b.sent();\n                        return [2 /*return*/, Promise.resolve({ value: text })];\n                    case 2: return [4 /*yield*/, navigator.clipboard.read()];\n                    case 3:\n                        data = _b.sent();\n                        for (_i = 0, _a = data.items; _i < _a.length; _i++) {\n                            item = _a[_i];\n                            if (item.type === 'text/plain') {\n                                return [2 /*return*/, Promise.resolve({ value: item.getAs('text/plain') })];\n                            }\n                        }\n                        _b.label = 4;\n                    case 4: return [2 /*return*/, Promise.reject('Unable to get data from clipboard')];\n                }\n            });\n        });\n    };\n    return ClipboardPluginWeb;\n}(WebPlugin));\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard };\n//# sourceMappingURL=clipboard.js.map"]},"metadata":{},"sourceType":"module"}