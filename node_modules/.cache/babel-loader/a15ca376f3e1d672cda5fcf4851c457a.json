{"ast":null,"code":"import { createSelector } from 'reselect';\n\nvar getSchedule = function getSchedule(state) {\n  return state.data.schedule;\n};\n\nexport var getSpeakers = function getSpeakers(state) {\n  return state.data.speakers;\n};\n\nvar getSessions = function getSessions(state) {\n  return state.data.sessions;\n};\n\nvar getFilteredTracks = function getFilteredTracks(state) {\n  return state.data.filteredTracks;\n};\n\nvar getFavoriteIds = function getFavoriteIds(state) {\n  return state.data.favorites;\n};\n\nvar getSearchText = function getSearchText(state) {\n  return state.data.searchText;\n};\n\nexport var getFilteredSchedule = createSelector(getSchedule, getFilteredTracks, function (schedule, filteredTracks) {\n  var groups = [];\n  schedule.groups.forEach(function (group) {\n    var sessions = [];\n    group.sessions.forEach(function (session) {\n      session.tracks.forEach(function (track) {\n        if (filteredTracks.indexOf(track) > -1) {\n          sessions.push(session);\n        }\n      });\n    });\n\n    if (sessions.length) {\n      var groupToAdd = {\n        time: group.time,\n        sessions: sessions\n      };\n      groups.push(groupToAdd);\n    }\n  });\n  return {\n    date: schedule.date,\n    groups: groups\n  };\n});\nexport var getSearchedSchedule = createSelector(getFilteredSchedule, getSearchText, function (schedule, searchText) {\n  if (!searchText) {\n    return schedule;\n  }\n\n  var groups = [];\n  schedule.groups.forEach(function (group) {\n    var sessions = group.sessions.filter(function (s) {\n      return s.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\n    });\n\n    if (sessions.length) {\n      var groupToAdd = {\n        time: group.time,\n        sessions: sessions\n      };\n      groups.push(groupToAdd);\n    }\n  });\n  return {\n    date: schedule.date,\n    groups: groups\n  };\n});\nexport var getScheduleList = createSelector(getSearchedSchedule, function (schedule) {\n  return schedule;\n});\nexport var getGroupedFavorites = createSelector(getScheduleList, getFavoriteIds, function (schedule, favoriteIds) {\n  var groups = [];\n  schedule.groups.forEach(function (group) {\n    var sessions = group.sessions.filter(function (s) {\n      return favoriteIds.indexOf(s.id) > -1;\n    });\n\n    if (sessions.length) {\n      var groupToAdd = {\n        time: group.time,\n        sessions: sessions\n      };\n      groups.push(groupToAdd);\n    }\n  });\n  return {\n    date: schedule.date,\n    groups: groups\n  };\n});\n\nvar getIdParam = function getIdParam(_state, props) {\n  return props.match.params['id'];\n};\n\nexport var getSession = createSelector(getSessions, getIdParam, function (sessions, id) {\n  return sessions.find(function (s) {\n    return s.id === id;\n  });\n});\nexport var getSpeaker = createSelector(getSpeakers, getIdParam, function (speakers, id) {\n  return speakers.find(function (x) {\n    return x.id === id;\n  });\n});\nexport var getSpeakerSessions = createSelector(getSessions, function (sessions) {\n  var speakerSessions = {};\n  sessions.forEach(function (session) {\n    session.speakerNames && session.speakerNames.forEach(function (name) {\n      if (speakerSessions[name]) {\n        speakerSessions[name].push(session);\n      } else {\n        speakerSessions[name] = [session];\n      }\n    });\n  });\n  return speakerSessions;\n});\nexport var mapCenter = function mapCenter(state) {\n  var item = state.data.locations.find(function (l) {\n    return l.id === state.data.mapCenterId;\n  });\n\n  if (item == null) {\n    return {\n      id: 1,\n      name: 'Map Center',\n      lat: 43.071584,\n      lng: -89.380120\n    };\n  }\n\n  return item;\n};","map":{"version":3,"sources":["/home/fazna/cleanit/src/data/selectors.ts"],"names":["createSelector","getSchedule","state","data","schedule","getSpeakers","speakers","getSessions","sessions","getFilteredTracks","filteredTracks","getFavoriteIds","favorites","getSearchText","searchText","getFilteredSchedule","groups","forEach","group","session","tracks","track","indexOf","push","length","groupToAdd","time","date","getSearchedSchedule","filter","s","name","toLowerCase","getScheduleList","getGroupedFavorites","favoriteIds","id","getIdParam","_state","props","match","params","getSession","find","getSpeaker","x","getSpeakerSessions","speakerSessions","speakerNames","mapCenter","item","locations","l","mapCenterId","lat","lng"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport { Schedule, Session, ScheduleGroup } from '../models/Schedule';\nimport { AppState } from './state';\n\nconst getSchedule = (state: AppState) => {\n\n  return state.data.schedule\n};\nexport const getSpeakers = (state: AppState) => state.data.speakers;\nconst getSessions = (state: AppState) => state.data.sessions;\nconst getFilteredTracks = (state: AppState) => state.data.filteredTracks;\nconst getFavoriteIds = (state: AppState) => state.data.favorites;\nconst getSearchText = (state: AppState) => state.data.searchText;\n\nexport const getFilteredSchedule = createSelector(\n  getSchedule, getFilteredTracks,\n  (schedule, filteredTracks) => {\n    const groups: ScheduleGroup[] = [];\n    schedule.groups.forEach(group => {\n      const sessions: Session[] = [];\n      group.sessions.forEach(session => {\n        session.tracks.forEach(track => {\n          if (filteredTracks.indexOf(track) > -1) {\n            sessions.push(session);\n          }\n        })\n      })\n      if (sessions.length) {\n        const groupToAdd: ScheduleGroup = {\n          time: group.time,\n          sessions\n        }\n        groups.push(groupToAdd);\n      }\n    });\n\n    return {\n      date: schedule.date,\n      groups\n    } as Schedule;\n  }\n);\n\nexport const getSearchedSchedule = createSelector(\n  getFilteredSchedule, getSearchText,\n  (schedule, searchText) => {\n    if (!searchText) {\n      return schedule;\n    }\n    const groups: ScheduleGroup[] = [];\n    schedule.groups.forEach(group => {\n\n      const sessions = group.sessions.filter(s => s.name.toLowerCase().indexOf(searchText.toLowerCase()) > -1)\n      if (sessions.length) {\n        const groupToAdd: ScheduleGroup = {\n          time: group.time,\n          sessions\n        }\n        groups.push(groupToAdd);\n      }\n    });\n    return {\n      date: schedule.date,\n      groups\n    } as Schedule;\n  }\n)\n\nexport const getScheduleList = createSelector(\n  getSearchedSchedule,\n  (schedule) => schedule\n);\n\nexport const getGroupedFavorites = createSelector(\n  getScheduleList, getFavoriteIds,\n  (schedule, favoriteIds) => {\n    const groups: ScheduleGroup[] = [];\n    schedule.groups.forEach(group => {\n      const sessions = group.sessions.filter(s => favoriteIds.indexOf(s.id) > -1)\n      if (sessions.length) {\n        const groupToAdd: ScheduleGroup = {\n          time: group.time,\n          sessions\n        }\n        groups.push(groupToAdd);\n      }\n    });\n    return {\n      date: schedule.date,\n      groups\n    } as Schedule;\n  }\n);\n\n\nconst getIdParam = (_state: AppState, props: any) => {\n  return props.match.params['id'];\n}\n\nexport const getSession = createSelector(\n  getSessions, getIdParam,\n  (sessions, id) => {\n    return sessions.find(s => s.id === id);\n  }\n);\n\nexport const getSpeaker = createSelector(\n  getSpeakers, getIdParam,\n  (speakers, id) => speakers.find(x => x.id === id)\n);\n\nexport const getSpeakerSessions = createSelector(\n  getSessions,\n  (sessions) => {\n    const speakerSessions: { [key: string]: Session[] } = {};\n\n    sessions.forEach(session => {\n      session.speakerNames && session.speakerNames.forEach(name => {\n        if (speakerSessions[name]) {\n          speakerSessions[name].push(session);\n        } else {\n          speakerSessions[name] = [session];\n        }\n      })\n    });\n    return speakerSessions;\n  }\n);\n\nexport const mapCenter = (state: AppState) => {\n  const item = state.data.locations.find(l => l.id === state.data.mapCenterId);\n  if (item == null) {\n    return {\n      id: 1,\n      name: 'Map Center',\n      lat: 43.071584,\n      lng: -89.380120\n    };\n  }\n  return item;\n}\n"]},"metadata":{},"sourceType":"module"}