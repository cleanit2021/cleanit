{"ast":null,"code":"import React, { useContext, useMemo } from 'react';\nimport { AppContext } from './AppContext';\n;\nexport function connect(_ref) {\n  var _ref$mapStateToProps = _ref.mapStateToProps,\n      mapStateToProps = _ref$mapStateToProps === void 0 ? function () {\n    return {};\n  } : _ref$mapStateToProps,\n      _ref$mapDispatchToPro = _ref.mapDispatchToProps,\n      mapDispatchToProps = _ref$mapDispatchToPro === void 0 ? {} : _ref$mapDispatchToPro,\n      component = _ref.component;\n\n  var Connect = function Connect(ownProps) {\n    var context = useContext(AppContext);\n    var dispatchFuncs = useMemo(function () {\n      var dispatchFuncs = {};\n      Object.keys(mapDispatchToProps).forEach(function (key) {\n        var oldFunc = mapDispatchToProps[key];\n\n        var newFunc = function newFunc() {\n          var dispatchFunc = oldFunc.apply(void 0, arguments);\n\n          if (typeof dispatchFunc === 'object') {\n            context.dispatch(dispatchFunc);\n          } else {\n            var result = dispatchFunc(context.dispatch);\n\n            if (typeof result === 'object' && result.then) {\n              result.then(function (dispatchObject) {\n                if (dispatchObject && dispatchObject.type) {\n                  context.dispatch(dispatchObject);\n                }\n              });\n            }\n          }\n        };\n\n        dispatchFuncs[key] = newFunc;\n      });\n      return dispatchFuncs; // eslint-disable-next-line\n    }, [mapDispatchToProps]);\n    var props = useMemo(function () {\n      return Object.assign({}, ownProps, mapStateToProps(context.state, ownProps), dispatchFuncs); // eslint-disable-next-line\n    }, [ownProps, context.state]);\n    return React.createElement(component, props);\n  };\n\n  return React.memo(Connect);\n}","map":{"version":3,"sources":["/home/fazna/cleanit/src/data/connect.tsx"],"names":["React","useContext","useMemo","AppContext","connect","mapStateToProps","mapDispatchToProps","component","Connect","ownProps","context","dispatchFuncs","Object","keys","forEach","key","oldFunc","newFunc","dispatchFunc","dispatch","result","then","dispatchObject","type","props","assign","state","createElement","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAQC;AAED,OAAO,SAASC,OAAT,OAA6Q;AAAA,kCAAhMC,eAAgM;AAAA,MAAhMA,eAAgM,qCAA9K;AAAA,WAAO,EAAP;AAAA,GAA8K;AAAA,mCAAnJC,kBAAmJ;AAAA,MAAnJA,kBAAmJ,sCAA9H,EAA8H;AAAA,MAAxGC,SAAwG,QAAxGA,SAAwG;;AAElR,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,QAAD,EAAyB;AACvC,QAAMC,OAAO,GAAGT,UAAU,CAACE,UAAD,CAA1B;AAEA,QAAMQ,aAAa,GAAGT,OAAO,CAAC,YAAM;AAClC,UAAMS,aAAqC,GAAG,EAA9C;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYP,kBAAZ,EAAgCQ,OAAhC,CAAwC,UAACC,GAAD,EAAS;AAC/C,YAAMC,OAAO,GAAIV,kBAAD,CAA4BS,GAA5B,CAAhB;;AACA,YAAME,OAAO,GAAG,SAAVA,OAAU,GAAkB;AAChC,cAAMC,YAAY,GAAGF,OAAO,MAAP,mBAArB;;AACA,cAAI,OAAOE,YAAP,KAAwB,QAA5B,EAAsC;AACpCR,YAAAA,OAAO,CAACS,QAAR,CAAiBD,YAAjB;AACD,WAFD,MAEO;AACL,gBAAME,MAAM,GAAGF,YAAY,CAACR,OAAO,CAACS,QAAT,CAA3B;;AACA,gBAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,IAAzC,EAA+C;AAC7CD,cAAAA,MAAM,CAACC,IAAP,CAAY,UAACC,cAAD,EAAqC;AAC/C,oBAAIA,cAAc,IAAIA,cAAc,CAACC,IAArC,EAA2C;AACzCb,kBAAAA,OAAO,CAACS,QAAR,CAAiBG,cAAjB;AACD;AACF,eAJD;AAKD;AACF;AACF,SAdD;;AAeAX,QAAAA,aAAa,CAACI,GAAD,CAAb,GAAqBE,OAArB;AACD,OAlBD;AAmBA,aAAON,aAAP,CArBkC,CAsBlC;AACD,KAvB4B,EAuB1B,CAACL,kBAAD,CAvB0B,CAA7B;AA0BA,QAAMkB,KAAK,GAAGtB,OAAO,CAAC,YAAM;AAC1B,aAAOU,MAAM,CAACa,MAAP,CAAc,EAAd,EAAkBhB,QAAlB,EAA4BJ,eAAe,CAACK,OAAO,CAACgB,KAAT,EAAgBjB,QAAhB,CAA3C,EAAsEE,aAAtE,CAAP,CAD0B,CAE1B;AACD,KAHoB,EAGlB,CAACF,QAAD,EAAWC,OAAO,CAACgB,KAAnB,CAHkB,CAArB;AAKA,WAAO1B,KAAK,CAAC2B,aAAN,CAA+BpB,SAA/B,EAA0CiB,KAA1C,CAAP;AACD,GAnCD;;AAoCA,SAAOxB,KAAK,CAAC4B,IAAN,CAAWpB,OAAX,CAAP;AACD","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { AppContext } from './AppContext';\nimport { DispatchObject } from '../util/types';\nimport { AppState } from './state';\n\ninterface ConnectParams<TOwnProps, TStateProps, TDispatchProps> {\n  mapStateToProps?: (state: AppState, props: TOwnProps) => TStateProps,\n  mapDispatchToProps?: TDispatchProps,\n  component: React.ComponentType<any>\n};\n\nexport function connect<TOwnProps = any, TStateProps = any, TDispatchProps = any>({ mapStateToProps = () => ({} as TStateProps), mapDispatchToProps = {} as TDispatchProps, component }: ConnectParams<TOwnProps, TStateProps, TDispatchProps>): React.FunctionComponent<TOwnProps> {\n\n  const Connect = (ownProps: TOwnProps) => {\n    const context = useContext(AppContext);\n\n    const dispatchFuncs = useMemo(() => {\n      const dispatchFuncs: { [key: string]: any } = {};\n      Object.keys(mapDispatchToProps).forEach((key) => {\n        const oldFunc = (mapDispatchToProps as any)[key];\n        const newFunc = (...args: any) => {\n          const dispatchFunc = oldFunc(...args);\n          if (typeof dispatchFunc === 'object') {\n            context.dispatch(dispatchFunc);\n          } else {\n            const result = dispatchFunc(context.dispatch)\n            if (typeof result === 'object' && result.then) {\n              result.then((dispatchObject?: DispatchObject) => {\n                if (dispatchObject && dispatchObject.type) {\n                  context.dispatch(dispatchObject);\n                }\n              })\n            }\n          }\n        }\n        dispatchFuncs[key] = newFunc\n      });\n      return dispatchFuncs;\n      // eslint-disable-next-line\n    }, [mapDispatchToProps])\n\n\n    const props = useMemo(() => {\n      return Object.assign({}, ownProps, mapStateToProps(context.state, ownProps), dispatchFuncs);\n      // eslint-disable-next-line\n    }, [ownProps, context.state]);\n\n    return React.createElement<TOwnProps>(component, props);\n  }\n  return React.memo(Connect as any);\n}\n"]},"metadata":{},"sourceType":"module"}